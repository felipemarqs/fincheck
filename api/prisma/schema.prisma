// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid()) @db.Uuid
  name     String
  email    String @unique
  password String

  bankAccounts         BankAccount[]
  categories           Category[]
  transactions         Transaction[]
  recurringTransaction RecurringTransaction[]
  installmentPurchases InstallmentPurchase[]
  creditCards          CreditCard[]
  contacts             Contact[]

  @@map("users")
}

model Contact {
  id     String  @id @default(uuid()) @db.Uuid
  name   String
  email  String?
  phone  String?
  userId String  @map("user_id") @db.Uuid
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

enum BankAccountType {
  CHECKING
  INVESTMENT
  CASH

  @@map("bank_account_type")
}

model BankAccount {
  id             String          @id @default(uuid()) @db.Uuid
  userId         String          @map("user_id") @db.Uuid
  name           String
  initialBalance Float           @map("initial_balance")
  type           BankAccountType
  color          String

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions         Transaction[]
  recurringTransaction RecurringTransaction[]
  installmentPurchases InstallmentPurchase[]
  creditCards          CreditCard[]

  @@map("bank_accounts")
}

enum TransactionType {
  INCOME
  EXPENSE

  @@map("transaction_type")
}

model Category {
  id     String          @id @default(uuid()) @db.Uuid
  userId String          @map("user_id") @db.Uuid
  name   String
  icon   String
  type   TransactionType

  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions         Transaction[]
  recurringTransaction RecurringTransaction[]
  installmentPurchases InstallmentPurchase[]

  @@map("categories")
}

model Transaction {
  id                    String          @id @default(uuid()) @db.Uuid
  userId                String          @map("user_id") @db.Uuid
  bankAccountId         String          @map("bank_account_id") @db.Uuid
  categoryId            String?         @map("category_id") @db.Uuid
  creditCardId          String?         @map("credit_card_id") @db.Uuid
  installmentPurchaseId String?         @map("installment_purchase_id") @db.Uuid
  name                  String
  value                 Float
  date                  DateTime
  type                  TransactionType
  isPaid                Boolean         @map("is_paid")
  createdAt             DateTime        @default(now())

  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount         BankAccount          @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category            Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  installment         Installment?
  creditCard          CreditCard?          @relation(fields: [creditCardId], references: [id], onDelete: SetNull)
  installmentPurchase InstallmentPurchase? @relation(fields: [installmentPurchaseId], references: [id], onUpdate: SetNull)

  @@map("transactions")
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY

  @@map("recurrence_type")
}

model RecurringTransaction {
  id            String          @id @default(uuid()) @db.Uuid
  userId        String          @map("user_id") @db.Uuid
  bankAccountId String          @map("bank_account_id") @db.Uuid
  categoryId    String?         @map("category_id") @db.Uuid
  creditCardId  String?         @map("credit_card_id") @db.Uuid
  name          String
  value         Float
  startDate     DateTime        @map("start_date")
  endDate       DateTime?       @map("end_date")
  recurrence    RecurrenceType
  type          TransactionType

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category    Category?   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  creditCard  CreditCard? @relation(fields: [creditCardId], references: [id], onDelete: SetNull)

  @@map("recurring_transactions")
}

model InstallmentPurchase {
  id                   String          @id @default(uuid()) @db.Uuid
  userId               String          @map("user_id") @db.Uuid
  bankAccountId        String?         @map("bank_account_id") @db.Uuid
  categoryId           String?         @map("category_id") @db.Uuid
  creditCardId         String?         @map("credit_card_id") @db.Uuid
  name                 String
  totalValue           Float           @map("total_value")
  numberOfInstallments Int             @map("number_of_installments")
  startDate            DateTime        @map("start_date")
  type                 TransactionType

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount  BankAccount?  @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  installments Installment[]
  creditCard   CreditCard?   @relation(fields: [creditCardId], references: [id])
  transactions Transaction[]

  @@map("installment_purchases")
}

model Installment {
  id                    String              @id @default(uuid()) @db.Uuid
  installmentPurchaseId String              @map("installment_purchase_id") @db.Uuid
  transactionId         String              @unique @map("transaction_id") @db.Uuid
  value                 Float
  dueDate               DateTime            @map("due_date")
  paid                  Boolean             @default(false)
  installmentPurchase   InstallmentPurchase @relation(fields: [installmentPurchaseId], references: [id], onDelete: Cascade)
  transaction           Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("installments")
}

model CreditCard {
  id                    String                 @id @default(uuid()) @db.Uuid
  userId                String                 @map("user_id") @db.Uuid
  bankAccountId         String?                @map("bank_account_id") @db.Uuid
  name                  String
  color                 String                 @default("#868E96")
  limit                 Float                  @map("credit_limit")
  availableLimit        Float                  @map("available_limit")
  closingDay            Int                    @map("closing_day")
  dueDay                Int                    @map("due_day")
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount           BankAccount?           @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)
  transactions          Transaction[]
  installmentPurchases  InstallmentPurchase[]
  recurringTransactions RecurringTransaction[]

  @@map("credit_cards")
}
